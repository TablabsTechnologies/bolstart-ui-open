{"version":3,"sources":["webpack:///src/app/components/investor/investor-routing.module.ts","webpack:///src/app/components/investor/investor.module.ts","webpack:///src/app/components/investor/investor.component.ts","webpack:///src/app/components/investor/investor.component.html","webpack:///src/app/components/investor/inv-comp-detail/inv-comp-detail.component.ts","webpack:///src/app/components/investor/inv-comp-detail/inv-comp-detail.component.html","webpack:///src/app/components/investor/investor.service.ts"],"names":["routes","path","component","children","InvestorRoutingModule","forChild","imports","exports","InvestorModule","declarations","providers","InvestorComponent","investorApi","router","companyList","encrypt","localStorage","getItem","userInfo","JSON","parse","decrypt","toString","Utf8","getCompanyList","getAllCompanyListByInvestorId","id","subscribe","response","success","data","companyId","navigate","queryParams","selector","templateUrl","styleUrls","InvCompDetailComponent","timelineImage","defaultTimlineImage","getCompanyDetailById","res","companyDetail","InvestorService","http","baseUrl","userId","get","providedIn"],"mappings":"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","file":"components-investor-investor-module-es5.js","sourcesContent":["import { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CompanyInfoComponent } from '../company/company-info/company-info.component';\r\nimport { CompanyPublishComponent } from '../company/company-publish/company-publish.component';\r\nimport { InvCompDetailComponent } from './inv-comp-detail/inv-comp-detail.component';\r\nimport { InvestorComponent } from './investor.component';\r\nimport { NgModule } from '@angular/core';\r\n\r\nconst routes: Routes = [{\r\n  path: '', component: InvestorComponent,\r\n  children: [\r\n    {\r\n      path: 'companyDetail',\r\n      component: InvCompDetailComponent,\r\n      children: [\r\n        {\r\n          path: 'publish',\r\n          component: CompanyPublishComponent\r\n        },\r\n        {\r\n          path: 'detail',\r\n          component: CompanyInfoComponent\r\n        },\r\n      ]\r\n    }\r\n  ]\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class InvestorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { CompanyModule } from '../company/company.module';\r\nimport { InvCompDetailComponent } from './inv-comp-detail/inv-comp-detail.component';\r\nimport { InvestorComponent } from './investor.component';\r\nimport { InvestorRoutingModule } from './investor-routing.module';\r\nimport { InvestorService } from './investor.service';\r\nimport { NgModule } from '@angular/core';\r\nimport { SharedModule } from './../../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [InvestorComponent, InvCompDetailComponent],\r\n  imports: [\r\n    CommonModule,\r\n    InvestorRoutingModule,\r\n    SharedModule,\r\n    CompanyModule\r\n\r\n\r\n  ],\r\n  providers: [\r\n    InvestorService\r\n  ]\r\n})\r\nexport class InvestorModule { }\r\n","import * as CryptoJS from 'crypto-js';\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\nimport { InvestorService } from './investor.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-investor',\r\n  templateUrl: './investor.component.html',\r\n  styleUrls: ['./investor.component.scss']\r\n})\r\nexport class InvestorComponent implements OnInit {\r\n  companyList: any = [];\r\n  userInfo: any;\r\n\r\n  constructor(private investorApi: InvestorService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    let encrypt = localStorage.getItem('Bolstart');\r\n    this.userInfo = JSON.parse(CryptoJS.AES.decrypt(encrypt, \"Bollstart\").toString(CryptoJS.enc.Utf8));\r\n\r\n    this.getCompanyList();\r\n  }\r\n\r\n  getCompanyList() {\r\n    this.investorApi.getAllCompanyListByInvestorId(this.userInfo.id).subscribe(response => {\r\n      if (response.success) {\r\n        this.companyList = response.data;\r\n      }\r\n    })\r\n  }\r\n\r\n  goToCompanyDetail(companyId) {\r\n    this.router.navigate(['./investor/companyDetail/publish'], { queryParams: { companyId: companyId } });\r\n\r\n  }\r\n\r\n\r\n}\r\n","<app-header></app-header>\r\n<section class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-5\">\r\n            <div class=\"card\">\r\n                <div class=\"card-header\">\r\n                    <h5>Company List</h5>\r\n                </div>\r\n                <ul>\r\n                    <li *ngFor=\"let item of companyList\" class=\"pointer\">\r\n                        <span style=\"display: flex;\" (click)=\"goToCompanyDetail(item.id)\">\r\n                            <img [src]=\"item.logo\" class=\"profile\" />&nbsp;\r\n                            <h6 class=\"pt-2\">\r\n                                {{item.name}}<br>\r\n                                <label style=\"color: darkgray;\">{{item.industry}}</label>\r\n                            </h6>\r\n                        </span>\r\n                        <hr>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-7\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n\r\n</section>","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { InvestorService } from './../investor.service';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-inv-comp-detail',\r\n  templateUrl: './inv-comp-detail.component.html',\r\n  styleUrls: ['./inv-comp-detail.component.scss']\r\n})\r\nexport class InvCompDetailComponent implements OnInit {\r\n  companyDetail: any;\r\n  timelineImage: string = environment.defaultTimlineImage;\r\n\r\n  constructor(\r\n    private routes: ActivatedRoute,\r\n    private investorApi: InvestorService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.routes.queryParams.subscribe(response => {\r\n      this.getCompanyDetailById(response.companyId);\r\n    })\r\n  }\r\n\r\n\r\n  getCompanyDetailById(companyId) {\r\n    this.investorApi.getCompanyDetailById(companyId).subscribe(res => {\r\n      if (res.success) {\r\n        this.companyDetail = res.data;\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"card\">\r\n    <div class=\"bg\" [style.background-image]=\"timelineImage\">\r\n        <div class=\"inner\">\r\n            <div class=\"profile-image\">\r\n                <img class=\"profile\" [src]=\"companyDetail?.logo\">\r\n            </div>\r\n            <div class=\"custom-padding\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-8\">\r\n                        <div class=\"name\" style=\"display: inline-flex;\">{{companyDetail?.name}}\r\n                            ({{companyDetail?.company_type}})&nbsp; <h6 data-toggle=\"tooltip\" data-placement=\"right\"\r\n                                title=\"Not Verified\" style=\"color: #F0541E;\"\r\n                                *ngIf=\"companyDetail?.isVerified == 'false'\"><i\r\n                                    class=\"fa fa-exclamation-circle\"></i>&nbsp;\r\n\r\n                            </h6>\r\n                            <h6 data-toggle=\"tooltip\" data-placement=\"right\" title=\"Verified\" style=\"color: #009944;\"\r\n                                *ngIf=\"companyDetail?.isVerified == 'approved'\"><i class=\"fa fa-check-circle\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                &nbsp;\r\n                            </h6>\r\n                        </div>\r\n                        <div>\r\n                            <a href=\"//{{companyDetail?.websiteLink}}\" target=\"_blank\"\r\n                                class=\"connection\">{{companyDetail?.websiteLink}}</a>\r\n                        </div>\r\n                        <span class=\"name_second\">{{companyDetail?.industry}}</span>\r\n                        <div>\r\n                            <span>{{companyDetail?.city}},\r\n                                {{companyDetail?.state}},{{companyDetail?.country}}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style=\"display: inline-flex;\">\r\n                <div class=\"btn-1\" routerLink=\"./publish\" [queryParams]=\"{companyId:companyDetail?.id}\"\r\n                    routerLinkActive=\"active-link\">Updates</div> &nbsp;\r\n                <div class=\"btn-1\" routerLink=\"./detail\" [queryParams]=\"{companyId:companyDetail?.id}\"\r\n                    routerLinkActive=\"active-link\">About</div>&nbsp;\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n<router-outlet></router-outlet>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InvestorService {\r\n  baseUrl = environment.baseUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllCompanyListByInvestorId(userId): Observable<any> {\r\n    return this.http.get(this.baseUrl + `investorportal/getcompany/byconnection?userid=${userId}`)\r\n  }\r\n\r\n  getCompanyDetailById(companyId): Observable<any> {\r\n    return this.http.get(this.baseUrl + `company/getById?id=${companyId}`)\r\n  }\r\n\r\n\r\n}\r\n"]}